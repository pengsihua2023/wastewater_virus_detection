// Metagenome Assembly and Diamond Taxonomic Classification Workflow Configuration (English Version)
//
// This configuration is used for:
// 1. Metagenome Assembly assembly (MEGAHIT and SPAdes)
// 2. Gene prediction (Prodigal)
// 3. Diamond classification with RVDB database (requires --diamond_db parameter)
//
// Database: RVDB (Reference Viral DataBase) - optimized for viral metagenomics
// Resource allocation is optimized for RVDB (smaller database than NCBI nr)
//
// Usage example:
// nextflow run workflow_en.nf -c metagenome_assembly_classification_en.config --input samplesheet.csv --outdir results --diamond_db /path/to/RVDB/RVDB_prot_ref.dmnd

process {
    executor = 'slurm'
    queue = 'bahl_p'
    clusterOptions = '--ntasks=1'
    
    errorStrategy = 'retry'
    maxRetries = 2
    
    // Default resource allocation
    cpus = 8
    memory = '32 GB'
    time = '6h'
    
    // Process-specific resource allocation
    withName: 'FASTP' {
        cpus = 8
        memory = '16 GB'
        time = '4h'
        label = 'process_medium'
    }
    
    withName: 'MEGAHIT_ASSEMBLY' {
        cpus = 16
        memory = '64 GB'
        time = '12h'
        label = 'process_high'
    }
    
    withName: 'SPADES_ASSEMBLY' {
        cpus = 32
        memory = '512 GB'  // Use large memory to avoid issues
        time = '48h'       // Metagenome assembly requires longer time
        label = 'process_high'
    }
    
    withName: 'PRODIGAL_MEGAHIT' {
        cpus = 4
        memory = '16 GB'
        time = '4h'
        label = 'process_medium'
    }
    
    withName: 'PRODIGAL_SPADES' {
        cpus = 4
        memory = '16 GB'
        time = '4h'
        label = 'process_medium'
    }
    
    withName: 'DIAMOND_CLASSIFICATION_MEGAHIT' {
        cpus = 16
        memory = '64 GB'  // Reduced for RVDB (smaller database)
        time = '12h'      // Faster with RVDB
        label = 'process_high'
    }
    
    withName: 'DIAMOND_CLASSIFICATION_SPADES' {
        cpus = 16
        memory = '64 GB'  // Reduced for RVDB (smaller database)
        time = '12h'      // Faster with RVDB
        label = 'process_high'
    }
    
    withName: 'MERGE_DIAMOND_REPORTS' {
        cpus = 2
        memory = '8 GB'
        time = '1h'
        label = 'process_low'
    }
}

params {
    // Resource limits
    max_cpus = 32
    max_memory = '512.GB'  // Adjusted to support 512GB memory requirement for SPAdes
    max_time = '72.h'
    
    // fastp quality control parameters
    skip_fastp = false
    fastp_qualified_quality = 20    // Minimum quality value
    fastp_unqualified_percent = 40  // Maximum percentage of low-quality bases allowed
    fastp_min_length = 50           // Minimum read length
    
    // MEGAHIT assembly parameters
    megahit_memory = 0.8
    megahit_min_contig_len = 1000
    
    // SPAdes parameters (using metaSPAdes mode)
    spades_meta = true
    
    // Diamond parameters
    diamond_evalue = 1e-5
    diamond_max_target_seqs = 1
    diamond_outfmt = '6 qseqid sseqid pident length mismatch gapopen qstart qend sstart send evalue bitscore staxids'
    
    // Taxonomy database parameters (NCBI taxonomy for lineage resolution)
    taxonomy_names = '/scratch/sp96859/Meta-genome-data-analysis/Apptainer/databases/RVDB/names.dmp'
    taxonomy_nodes = '/scratch/sp96859/Meta-genome-data-analysis/Apptainer/databases/RVDB/nodes.dmp'
    
    // Merge reports parameters
    skip_merge_reports = false  // Whether to skip comprehensive report generation
}

// Apptainer/Singularity configuration (for MEGAHIT and SPAdes)
apptainer {
    enabled = true
    autoMounts = true
    cacheDir = '/scratch/sp96859/Meta-genome-data-analysis/Apptainer/singularity'
}

// Conda configuration (for Kraken2)
conda {
    enabled = true
    cacheDir = '/scratch/sp96859/Meta-genome-data-analysis/conda_cache'
}

// Environment variables
env {
    // Bind host database directory to /databases in container
    SINGULARITY_BIND = "/scratch/sp96859/Meta-genome-data-analysis/Apptainer/databases:/databases"
}

// Input samplesheet format
// Expected format: sample,fastq_1,fastq_2
// Example:
// sample,fastq_1,fastq_2
// llnl_66ce4dde,/path/to/sample_R1.fastq.gz,/path/to/sample_R2.fastq.gz

